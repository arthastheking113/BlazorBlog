@page "/page/{page}"
@page "/"
@using BlazorServer.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@using BlazorServer.Services
@inject IImageService _imageService
@inject NavigationManager NavigationManager
    <!-- Page Header-->
<header class="masthead" style="background-image: url('assets/img/home-program2.jpg')">
    <div class="overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-10 mx-auto">
                <div class="site-heading">
                    <h1>
                        Welcome
                    </h1>
                    <span class="subheading">The Blog Where I Share All Of My Story</span>
                </div>
            </div>
        </div>
    </div>
</header>
<!-- Main Content-->
<div class="container-fluid" style="padding-right:5%;padding-left:5%">
    <div class="row">
        <div class="col-md-9">
            <div class="row">
                @if (Posts is not null)
                {
                    foreach (var item in Posts)
                    {
                        <div class="col-md-4">
                            <a href="/post/details/@item.Slug">
                                <img class="img-fluid mb-1" style="width:750px;height:170px;" src="@_imageService.DecodeFile(item.ImageData, item.ContentType)" />
                                <h4>@item.Title </h4>


                            </a>
                            <p style="font-size:small" class="post-meta mt-2 mb-2">
                                By
                                <a target="_blank" href="https://duylanle-portfolio.netlify.app/">Duy Lan Le</a>
                                on @item.CreateDate.ToString("MMMM/dd/yyyy") / <i style="padding-left:2%" class="fas fa-comment"></i> @item.PostComments.Count / <span class="ps-post__meta text-dark"><span class="iconify" data-icon="carbon:view-filled" data-inline="true"></span> @item.ViewCount Views</span>
                            </p>
                            <p class=" mt-2 mb-4" style="font-size:medium"><i>@item.Abstract</i></p>


                        </div>
                    }
                }
            </div>
            <!-- Pager-->
            <div class="row">
                <div class="col text-center">
                    <div class="clearfix">
                        @if (totalPage != 0)
                        {
                            @for (var loop = 1; loop <= totalPage; loop++)
                            {
                                var loop1 = loop;
                                var myClass = "btn-secondary";
                                if (loop == (int)pageINT)
                                {
                                    myClass = "btn-dark";
                                }
                                <input hidden type="text" @bind="page"   />
                                <button  @onclick="() => GoToPage(loop1)" class="btn @myClass">@loop</button>
                            }
                        }

                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="position-sticky" style="top: 2rem;">

                <div class="p-4 mb-3">
                    <EditForm Model="SearchModel" OnValidSubmit=@Search  class="ps-search--widget">

                        <input type="text" class="form-control" @bind="SearchModel.Search" placeholder="Search for...">

                        <button type="submit" ><i class="fas fa-search"></i></button>

                    </EditForm>
                   

                </div>
                <hr />
                <div class="p-3">
                    <h4 class="fst-italic">Category</h4>

                    <ol class="list-unstyled mb-0">
                        @if (Categories is not null)
                        {
                            @foreach (var item in Categories)
                            {
                                <li style="margin-bottom:5%"><a href="category/@item.Slug" type="button"> @item.Name</a></li>
                            }
                        }
                    </ol>
                </div>
                <hr />
                <div class="p-3">
                    <h4 class="fst-italic">Contact Me</h4>

                    <ol class="list-unstyled">

                        <li style="margin-bottom:5%">
                            <a href="/about"><span class="iconify" data-icon="akar-icons:more-horizontal" data-inline="true"></span> About</a>
                        </li>
                        <li style="margin-bottom:5%">
                            <a href="/contact"><span class="iconify" data-icon="bx:bxs-phone-call" data-inline="true"></span> Contact</a>
                        </li>
                        <li style="margin-bottom:5%">
                            <a target="_blank" href="https://duylanle-portfolio.netlify.app/"><span class="iconify" data-icon="dashicons:portfolio" data-inline="true"></span> My Portfolio</a>
                        </li>
                        <li style="margin-bottom:5%">
                            <a target="_blank" href="https://github.com/arthastheking113/BlogTest"><span class="iconify" data-icon="akar-icons:github-fill" data-inline="true"></span> Github</a>
                        </li>
                        <li style="margin-bottom:5%">
                            <a target="_blank" href="https://www.linkedin.com/in/duy-lan-le-445262163/"><span class="iconify" data-icon="akar-icons:linkedin-fill" data-inline="true"></span> Linkedin</a>
                        </li>
                    </ol>
                </div>
            </div>
        </div>
    </div>

</div>



@code{
    private List<Model.BlogCategory> Categories;
    private List<Model.PostCategory> Posts;
    private List<Model.PostCategory> postSearch;
    private Model.SearchModel SearchModel = new();
    private int CategoryId;
    private int pageSize;
    private int totalPage;
    private int totalRecord;
    private int pageINT;
    [Parameter]
    public string search { get; set; }

    [Parameter]
    public string page { get; set; }

    [Parameter]
    public string category { get; set; }

    private Model.SearchModel NewSearch = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = await _context.BlogCategory.ToListAsync();


        if (String.IsNullOrEmpty(page))
        {
            page = "1";
        }
        pageSize = 9;
        totalPage = 0;
        totalRecord = 0;
        pageINT = Int32.Parse(page);


        postSearch = await _context.PostCategory.Include(h => h.PostComments).Include(p => p.BlogCategory).Where(y => y.IsproductionReady).ToListAsync();
        postSearch = postSearch.OrderByDescending(c => c.UpdateDate).ToList();
        totalRecord = postSearch.Count;
        totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
        var skipCount = ((int)pageINT - 1) * pageSize;
        Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();

    }

    private void GoToPage(int pageToNavigate)
    {
        totalRecord = postSearch.Count;
        if (totalRecord == pageSize)
        {
            totalPage = 1;
        }
        else
        {
            totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
        }
        var skipCount = ((int)pageToNavigate - 1) * pageSize;
        Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();
    }



    private void  Search()
    {
        NavigationManager.NavigateTo($"/search/{SearchModel.Search}");
    }


    private async Task SearchAsync(string slug)
    {
        page = "";
        if (String.IsNullOrEmpty(page))
        {
            page = "1";
        }
        pageINT = Int32.Parse(page);

        pageSize = 9;
        totalPage = 0;
        totalRecord = 0;
        if (search is not null)
        {
            if (slug is not null)
            {
                category = slug;
                CategoryId = _context.BlogCategory.FirstOrDefault(c => c.Slug == category).Id;
                search = search.ToLower();
                var postSearch = await _context.PostCategory.Include(h => h.PostComments).Where(y => y.IsproductionReady).Where(x => x.Title.ToLower().Contains(search) ||
                                                                x.Content.ToLower().Contains(search) ||
                                                                x.Abstract.ToLower().Contains(search) ||
                                                                x.BlogCategory.Name.ToLower().Contains(search) ||
                                                                x.BlogCategory.Description.ToLower().Contains(search) ||
                                                                x.PostComments.Any(c => c.Content.ToLower().Contains(search) ||
                                                                                    c.CustomUser.FirstName.ToLower().Contains(search) ||
                                                                                    c.CustomUser.LastName.ToLower().Contains(search) ||
                                                                                    c.CustomUser.Email.ToLower().Contains(search))).ToListAsync();
                postSearch = postSearch.OrderByDescending(c => c.UpdateDate).ToList();
                totalRecord = postSearch.Count;
                totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
                var skipCount = ((int)pageINT - 1) * pageSize;
                Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();
            }
            else
            {
                search = search.ToLower();
                var postSearch = await _context.PostCategory.Include(h => h.PostComments).Where(y => y.IsproductionReady).Where(x => x.Title.ToLower().Contains(search) ||
                                                                x.Content.ToLower().Contains(search) ||
                                                                x.Abstract.ToLower().Contains(search) ||
                                                                x.BlogCategory.Name.ToLower().Contains(search) ||
                                                                x.BlogCategory.Description.ToLower().Contains(search) ||
                                                                x.PostComments.Any(c => c.Content.ToLower().Contains(search) ||
                                                                                    c.CustomUser.FirstName.ToLower().Contains(search) ||
                                                                                    c.CustomUser.LastName.ToLower().Contains(search) ||
                                                                                    c.CustomUser.Email.ToLower().Contains(search))).ToListAsync();
                postSearch = postSearch.OrderByDescending(c => c.UpdateDate).ToList();
                totalRecord = postSearch.Count;
                totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
                var skipCount = ((int)pageINT - 1) * pageSize;
                Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();
            }

        }
        else
        {
            pageSize = 9;
            totalPage = 0;
            totalRecord = 0;
            if (slug is not null)
            {
                category = slug;
                CategoryId = _context.BlogCategory.FirstOrDefault(c => c.Slug == category).Id;

                var postSearch = await _context.PostCategory.Where(c => c.BlogCategoryId == CategoryId).Where(y => y.IsproductionReady).Include(h => h.PostComments).Include(p => p.BlogCategory).ToListAsync();
                postSearch = postSearch.OrderByDescending(c => c.UpdateDate).ToList();
                totalRecord = postSearch.Count;
                totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
                var skipCount = ((int)pageINT - 1) * pageSize;
                Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();
            }
            else
            {

                var postSearch = await _context.PostCategory.Where(y => y.IsproductionReady).Include(h => h.PostComments).Include(p => p.BlogCategory).ToListAsync();
                postSearch = postSearch.OrderByDescending(c => c.UpdateDate).ToList();
                totalRecord = postSearch.Count;
                totalPage = Convert.ToInt32(totalRecord / pageSize) + 1;
                var skipCount = ((int)pageINT - 1) * pageSize;
                Posts = postSearch.Skip(skipCount).Take(pageSize).ToList();
            }

        }


    }
}